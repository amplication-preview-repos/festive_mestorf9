/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Transaction } from "./Transaction";
import { TransactionCountArgs } from "./TransactionCountArgs";
import { TransactionFindManyArgs } from "./TransactionFindManyArgs";
import { TransactionFindUniqueArgs } from "./TransactionFindUniqueArgs";
import { CreateTransactionArgs } from "./CreateTransactionArgs";
import { UpdateTransactionArgs } from "./UpdateTransactionArgs";
import { DeleteTransactionArgs } from "./DeleteTransactionArgs";
import { Buyer } from "../../buyer/base/Buyer";
import { Cow } from "../../cow/base/Cow";
import { Seller } from "../../seller/base/Seller";
import { TransactionService } from "../transaction.service";
@graphql.Resolver(() => Transaction)
export class TransactionResolverBase {
  constructor(protected readonly service: TransactionService) {}

  async _transactionsMeta(
    @graphql.Args() args: TransactionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Transaction])
  async transactions(
    @graphql.Args() args: TransactionFindManyArgs
  ): Promise<Transaction[]> {
    return this.service.transactions(args);
  }

  @graphql.Query(() => Transaction, { nullable: true })
  async transaction(
    @graphql.Args() args: TransactionFindUniqueArgs
  ): Promise<Transaction | null> {
    const result = await this.service.transaction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Transaction)
  async createTransaction(
    @graphql.Args() args: CreateTransactionArgs
  ): Promise<Transaction> {
    return await this.service.createTransaction({
      ...args,
      data: {
        ...args.data,

        buyer: args.data.buyer
          ? {
              connect: args.data.buyer,
            }
          : undefined,

        cow: args.data.cow
          ? {
              connect: args.data.cow,
            }
          : undefined,

        seller: args.data.seller
          ? {
              connect: args.data.seller,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Transaction)
  async updateTransaction(
    @graphql.Args() args: UpdateTransactionArgs
  ): Promise<Transaction | null> {
    try {
      return await this.service.updateTransaction({
        ...args,
        data: {
          ...args.data,

          buyer: args.data.buyer
            ? {
                connect: args.data.buyer,
              }
            : undefined,

          cow: args.data.cow
            ? {
                connect: args.data.cow,
              }
            : undefined,

          seller: args.data.seller
            ? {
                connect: args.data.seller,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Transaction)
  async deleteTransaction(
    @graphql.Args() args: DeleteTransactionArgs
  ): Promise<Transaction | null> {
    try {
      return await this.service.deleteTransaction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Buyer, {
    nullable: true,
    name: "buyer",
  })
  async getBuyer(@graphql.Parent() parent: Transaction): Promise<Buyer | null> {
    const result = await this.service.getBuyer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Cow, {
    nullable: true,
    name: "cow",
  })
  async getCow(@graphql.Parent() parent: Transaction): Promise<Cow | null> {
    const result = await this.service.getCow(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Seller, {
    nullable: true,
    name: "seller",
  })
  async getSeller(
    @graphql.Parent() parent: Transaction
  ): Promise<Seller | null> {
    const result = await this.service.getSeller(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

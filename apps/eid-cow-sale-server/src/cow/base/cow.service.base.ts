/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Cow as PrismaCow,
  Transaction as PrismaTransaction,
} from "@prisma/client";

export class CowServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CowCountArgs, "select">): Promise<number> {
    return this.prisma.cow.count(args);
  }

  async cows<T extends Prisma.CowFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CowFindManyArgs>
  ): Promise<PrismaCow[]> {
    return this.prisma.cow.findMany<Prisma.CowFindManyArgs>(args);
  }
  async cow<T extends Prisma.CowFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CowFindUniqueArgs>
  ): Promise<PrismaCow | null> {
    return this.prisma.cow.findUnique(args);
  }
  async createCow<T extends Prisma.CowCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CowCreateArgs>
  ): Promise<PrismaCow> {
    return this.prisma.cow.create<T>(args);
  }
  async updateCow<T extends Prisma.CowUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CowUpdateArgs>
  ): Promise<PrismaCow> {
    return this.prisma.cow.update<T>(args);
  }
  async deleteCow<T extends Prisma.CowDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CowDeleteArgs>
  ): Promise<PrismaCow> {
    return this.prisma.cow.delete(args);
  }

  async findTransactions(
    parentId: string,
    args: Prisma.TransactionFindManyArgs
  ): Promise<PrismaTransaction[]> {
    return this.prisma.cow
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transactions(args);
  }
}

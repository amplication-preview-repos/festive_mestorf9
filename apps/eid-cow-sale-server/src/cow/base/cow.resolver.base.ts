/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Cow } from "./Cow";
import { CowCountArgs } from "./CowCountArgs";
import { CowFindManyArgs } from "./CowFindManyArgs";
import { CowFindUniqueArgs } from "./CowFindUniqueArgs";
import { CreateCowArgs } from "./CreateCowArgs";
import { UpdateCowArgs } from "./UpdateCowArgs";
import { DeleteCowArgs } from "./DeleteCowArgs";
import { TransactionFindManyArgs } from "../../transaction/base/TransactionFindManyArgs";
import { Transaction } from "../../transaction/base/Transaction";
import { CowService } from "../cow.service";
@graphql.Resolver(() => Cow)
export class CowResolverBase {
  constructor(protected readonly service: CowService) {}

  async _cowsMeta(
    @graphql.Args() args: CowCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Cow])
  async cows(@graphql.Args() args: CowFindManyArgs): Promise<Cow[]> {
    return this.service.cows(args);
  }

  @graphql.Query(() => Cow, { nullable: true })
  async cow(@graphql.Args() args: CowFindUniqueArgs): Promise<Cow | null> {
    const result = await this.service.cow(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Cow)
  async createCow(@graphql.Args() args: CreateCowArgs): Promise<Cow> {
    return await this.service.createCow({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Cow)
  async updateCow(@graphql.Args() args: UpdateCowArgs): Promise<Cow | null> {
    try {
      return await this.service.updateCow({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Cow)
  async deleteCow(@graphql.Args() args: DeleteCowArgs): Promise<Cow | null> {
    try {
      return await this.service.deleteCow(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Transaction], { name: "transactions" })
  async findTransactions(
    @graphql.Parent() parent: Cow,
    @graphql.Args() args: TransactionFindManyArgs
  ): Promise<Transaction[]> {
    const results = await this.service.findTransactions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
